From 45af296e3213e02aaa7bfe050001014749a7795d Mon Sep 17 00:00:00 2001
From: vrodri3 <victor.rodriguez.bahena@intel.com>
Date: Thu, 6 Jul 2017 10:13:05 -0500
Subject: [PATCH] Example ipynb code for machine learning tutorial

Signed-off-by: vrodri3 <victor.rodriguez.bahena@intel.com>
---
 tensorflow/docs_src/tutorials/MNIST_example.ipynb | 312 ++++++++++++++++++++++
 1 file changed, 312 insertions(+)
 create mode 100644 tensorflow/docs_src/tutorials/MNIST_example.ipynb

diff --git a/tensorflow/docs_src/tutorials/MNIST_example.ipynb b/tensorflow/docs_src/tutorials/MNIST_example.ipynb
new file mode 100644
index 0000000..390548e
--- /dev/null
+++ b/tensorflow/docs_src/tutorials/MNIST_example.ipynb
@@ -0,0 +1,312 @@
+# Copyright (c) 2017 Intel Corporation
+
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in all
+# copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+# SOFTWARE.
+
+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "deletable": true,
+    "editable": true
+   },
+   "source": [
+    "Import basic python libraries for machine learning"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {
+    "collapsed": true,
+    "deletable": true,
+    "editable": true
+   },
+   "outputs": [],
+   "source": [
+    "%matplotlib inline\n",
+    "\n",
+    "import tflearn\n",
+    "import tensorflow as tf\n",
+    "import matplotlib.pyplot as plt\n",
+    "import numpy as np"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "deletable": true,
+    "editable": true
+   },
+   "source": [
+    "Import the dataset (MNIST) from disk"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {
+    "collapsed": false,
+    "deletable": true,
+    "editable": true
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Extracting mnist/train-images-idx3-ubyte.gz\n",
+      "Extracting mnist/train-labels-idx1-ubyte.gz\n",
+      "Extracting mnist/t10k-images-idx3-ubyte.gz\n",
+      "Extracting mnist/t10k-labels-idx1-ubyte.gz\n"
+     ]
+    }
+   ],
+   "source": [
+    "import tflearn.datasets.mnist as mnist\n",
+    "\n",
+    "# split the data in a training set and a test set\n",
+    "trainX, trainY, testX, testY = mnist.load_data(one_hot=True)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "deletable": true,
+    "editable": true
+   },
+   "source": [
+    "Inspecting the data"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": false,
+    "deletable": true,
+    "editable": true
+   },
+   "outputs": [],
+   "source": [
+    "# Function for displaying a training image by it's index in the MNIST set\n",
+    "def display_digit(image):\n",
+    "    # Reshape 784 array into 28x28 image\n",
+    "    image = image.reshape([28,28])\n",
+    "    plt.imshow(image, cmap='gray_r')\n",
+    "    plt.show()\n",
+    "    \n",
+    "# Display the first (index 0) training image\n",
+    "display_digit(trainX[0])\n",
+    "display_digit(trainX[1])"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "deletable": true,
+    "editable": true
+   },
+   "source": [
+    "Build a basic neural network"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true,
+    "deletable": true,
+    "editable": true
+   },
+   "outputs": [],
+   "source": [
+    "# Define the neural network\n",
+    "def build_model():\n",
+    "    tf.reset_default_graph()\n",
+    "        \n",
+    "    # Inputs\n",
+    "    net = tflearn.input_data([None, trainX.shape[1]])\n",
+    "\n",
+    "    # Hidden layer(s)  \n",
+    "    net = tflearn.fully_connected(net, 128, activation='ReLU')\n",
+    "    net = tflearn.fully_connected(net, 32, activation='ReLU')\n",
+    "    \n",
+    "    # Output layer and training model\n",
+    "    net = tflearn.fully_connected(net, 10, activation='softmax')\n",
+    "    net = tflearn.regression(net, optimizer='adam', learning_rate=0.001, loss='categorical_crossentropy')\n",
+    "    \n",
+    "    model = tflearn.DNN(net)\n",
+    "    return model"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true,
+    "deletable": true,
+    "editable": true
+   },
+   "outputs": [],
+   "source": [
+    "model = build_model()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": false,
+    "deletable": true,
+    "editable": true
+   },
+   "outputs": [],
+   "source": [
+    "from random import randint\n",
+    "\n",
+    "digit = randint(0, 1000)\n",
+    "display_digit(trainX[digit])\n",
+    "\n",
+    "output = model.predict((trainX[digit], ))\n",
+    "\n",
+    "print([\"%0.3f\" % i for i in output[0]])"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "deletable": true,
+    "editable": true
+   },
+   "source": [
+    "Now train the network"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": false,
+    "deletable": true,
+    "editable": true
+   },
+   "outputs": [],
+   "source": [
+    "model.fit(trainX, trainY, validation_set=0.1, show_metric=True, batch_size=100, n_epoch=5, snapshot_epoch=True)\n",
+    "model.fit(trainX, trainY, validation_set=0.1, show_metric=True, batch_size=1024, n_epoch=15, snapshot_epoch=True)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "deletable": true,
+    "editable": true
+   },
+   "source": [
+    "Lets see how the model did on an example from the test set"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": false,
+    "deletable": true,
+    "editable": true
+   },
+   "outputs": [],
+   "source": [
+    "from random import randint\n",
+    "\n",
+    "digit = randint(0, 1000)\n",
+    "display_digit(testX[digit])\n",
+    "\n",
+    "output = model.predict((testX[digit], ))\n",
+    "\n",
+    "print([\"%0.3f\" % i for i in output[0]])"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {
+    "deletable": true,
+    "editable": true
+   },
+   "source": [
+    "Now, see how we do on the whole test set"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": false,
+    "deletable": true,
+    "editable": true
+   },
+   "outputs": [],
+   "source": [
+    "# Compare the labels that our model predicts with the actual labels\n",
+    "\n",
+    "# Find the indices of the most confident prediction for each item. That tells us the predicted digit for that sample.\n",
+    "predictions = np.array(model.predict(testX)).argmax(axis=1)\n",
+    "\n",
+    "# Calculate the accuracy, which is the percentage of times the predicated labels matched the actual labels\n",
+    "actual = testY.argmax(axis=1)\n",
+    "test_accuracy = np.mean(predictions == actual, axis=0)\n",
+    "\n",
+    "# Print out the result\n",
+    "print(\"Test accuracy: \", test_accuracy)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true,
+    "deletable": true,
+    "editable": true
+   },
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.6.1"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 2
+}
-- 
2.13.2

